/*
 * Copyright (c) 2020 Arthur Sadykov.
 */
package nb.java.bean.template;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import nb.java.bean.constants.ConstantDataManager;
import org.openide.WizardDescriptor;

/**
 *
 * @author Arthur Sadykov
 */
public class JavaBeanVisualPanel extends JPanel {

    private static final long serialVersionUID = 1L;
    private final List<FieldPanel> fieldPanels = new ArrayList<>();
    private final JavaBeanWizardPanel wizardPanel;

    public JavaBeanVisualPanel(JavaBeanWizardPanel wizardPanel) {
        initComponents();
        this.wizardPanel = wizardPanel;
    }

    @Override
    public String getName() {
        return ConstantDataManager.FIELDS;
    }

    boolean valid(WizardDescriptor wizardDescriptor) {
        return !fieldPanels.isEmpty()
                && fieldPanels.stream().noneMatch(fieldPanel -> (!fieldPanel.valid(wizardDescriptor)));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    public List<FieldPanel> getFieldPanels() {
        return Collections.unmodifiableList(fieldPanels);
    }

    void read(WizardDescriptor wizardDescriptor) {
        Object generateGetters = wizardDescriptor.getProperty(ConstantDataManager.GENERATE_GETTERS_PROPERTY);
        gettersCheckBox.setSelected(generateGetters == null ? true : (boolean) generateGetters);
        Object generateSetters = wizardDescriptor.getProperty(ConstantDataManager.GENERATE_SETTERS_PROPERTY);
        settersCheckBox.setSelected(generateSetters == null ? true : (boolean) generateSetters);
        Object generateEquals = wizardDescriptor.getProperty(ConstantDataManager.GENERATE_EQUALS_PROPERTY);
        equalsCheckBox.setSelected(generateEquals == null ? true : (boolean) generateEquals);
        Object generateHashCode = wizardDescriptor.getProperty(ConstantDataManager.GENERATE_HASH_CODE_PROPERTY);
        hashCodeCheckBox.setSelected(generateHashCode == null ? true : (boolean) generateHashCode);
        Object generateToString = wizardDescriptor.getProperty(ConstantDataManager.GENERATE_TO_STRING_PROPERTY);
        toStringCheckBox.setSelected(generateToString == null ? true : (boolean) generateToString);
        Object generateDefaultConstructor =
                wizardDescriptor.getProperty(ConstantDataManager.GENERATE_DEFAULT_CONSTRUCTOR);
        toStringCheckBox.setSelected(generateDefaultConstructor == null ? true : (boolean) generateDefaultConstructor);
    }

    void store(WizardDescriptor wizardDescriptor) {
        wizardDescriptor.putProperty(ConstantDataManager.GENERATE_GETTERS_PROPERTY, gettersCheckBox.isSelected());
        wizardDescriptor.putProperty(ConstantDataManager.GENERATE_SETTERS_PROPERTY, settersCheckBox.isSelected());
        wizardDescriptor.putProperty(ConstantDataManager.GENERATE_EQUALS_PROPERTY, equalsCheckBox.isSelected());
        wizardDescriptor.putProperty(ConstantDataManager.GENERATE_HASH_CODE_PROPERTY, hashCodeCheckBox.isSelected());
        wizardDescriptor.putProperty(ConstantDataManager.GENERATE_TO_STRING_PROPERTY, toStringCheckBox.isSelected());
        wizardDescriptor.putProperty(ConstantDataManager.GENERATE_DEFAULT_CONSTRUCTOR, defaultConstructorCheckBox.isSelected());
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addFieldButton = new javax.swing.JButton();
        fieldsScrollPane = new javax.swing.JScrollPane();
        fieldsPanel = new javax.swing.JPanel();
        includeMethodsScrollPane = new javax.swing.JScrollPane();
        includeMethodsPanel = new javax.swing.JPanel();
        gettersCheckBox = new javax.swing.JCheckBox();
        settersCheckBox = new javax.swing.JCheckBox();
        equalsCheckBox = new javax.swing.JCheckBox();
        hashCodeCheckBox = new javax.swing.JCheckBox();
        toStringCheckBox = new javax.swing.JCheckBox();
        defaultConstructorCheckBox = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(addFieldButton, org.openide.util.NbBundle.getMessage(JavaBeanVisualPanel.class, "JavaBeanVisualPanel.addFieldButton.text")); // NOI18N
        addFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFieldButtonActionPerformed(evt);
            }
        });

        fieldsPanel.setLayout(new javax.swing.BoxLayout(fieldsPanel, javax.swing.BoxLayout.Y_AXIS));
        fieldsScrollPane.setViewportView(fieldsPanel);

        includeMethodsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        includeMethodsScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        gettersCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(gettersCheckBox, org.openide.util.NbBundle.getMessage(JavaBeanVisualPanel.class, "JavaBeanVisualPanel.gettersCheckBox.text")); // NOI18N
        gettersCheckBox.setEnabled(false);
        gettersCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gettersCheckBoxActionPerformed(evt);
            }
        });

        settersCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(settersCheckBox, org.openide.util.NbBundle.getMessage(JavaBeanVisualPanel.class, "JavaBeanVisualPanel.settersCheckBox.text")); // NOI18N
        settersCheckBox.setEnabled(false);
        settersCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settersCheckBoxActionPerformed(evt);
            }
        });

        equalsCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(equalsCheckBox, org.openide.util.NbBundle.getMessage(JavaBeanVisualPanel.class, "JavaBeanVisualPanel.equalsCheckBox.text")); // NOI18N
        equalsCheckBox.setEnabled(false);
        equalsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsCheckBoxActionPerformed(evt);
            }
        });

        hashCodeCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(hashCodeCheckBox, org.openide.util.NbBundle.getMessage(JavaBeanVisualPanel.class, "JavaBeanVisualPanel.hashCodeCheckBox.text")); // NOI18N
        hashCodeCheckBox.setEnabled(false);
        hashCodeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hashCodeCheckBoxActionPerformed(evt);
            }
        });

        toStringCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(toStringCheckBox, org.openide.util.NbBundle.getMessage(JavaBeanVisualPanel.class, "JavaBeanVisualPanel.toStringCheckBox.text")); // NOI18N
        toStringCheckBox.setEnabled(false);
        toStringCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toStringCheckBoxActionPerformed(evt);
            }
        });

        defaultConstructorCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(defaultConstructorCheckBox, org.openide.util.NbBundle.getMessage(JavaBeanVisualPanel.class, "JavaBeanVisualPanel.defaultConstructorCheckBox.text")); // NOI18N
        defaultConstructorCheckBox.setEnabled(false);
        defaultConstructorCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultConstructorCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout includeMethodsPanelLayout = new javax.swing.GroupLayout(includeMethodsPanel);
        includeMethodsPanel.setLayout(includeMethodsPanelLayout);
        includeMethodsPanelLayout.setHorizontalGroup(
            includeMethodsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(includeMethodsPanelLayout.createSequentialGroup()
                .addGroup(includeMethodsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gettersCheckBox)
                    .addComponent(settersCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(includeMethodsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(equalsCheckBox)
                    .addComponent(hashCodeCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(includeMethodsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(defaultConstructorCheckBox)
                    .addComponent(toStringCheckBox))
                .addGap(0, 101, Short.MAX_VALUE))
        );
        includeMethodsPanelLayout.setVerticalGroup(
            includeMethodsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(includeMethodsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(includeMethodsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gettersCheckBox)
                    .addComponent(equalsCheckBox)
                    .addComponent(toStringCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(includeMethodsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(settersCheckBox)
                    .addComponent(hashCodeCheckBox)
                    .addComponent(defaultConstructorCheckBox)))
        );

        includeMethodsScrollPane.setViewportView(includeMethodsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldsScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addFieldButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(includeMethodsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addFieldButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(includeMethodsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFieldButtonActionPerformed
        FieldPanel fieldPanel = FieldPanel.create(wizardPanel);
        fieldPanels.add(fieldPanel);
        gettersCheckBox.setEnabled(true);
        settersCheckBox.setEnabled(true);
        equalsCheckBox.setEnabled(true);
        hashCodeCheckBox.setEnabled(true);
        toStringCheckBox.setEnabled(true);
        defaultConstructorCheckBox.setEnabled(true);
        wizardPanel.fireChangeEvent();
        SwingUtilities.invokeLater(() -> {
            fieldsPanel.add(fieldPanel);
            fieldPanel.setMaximumSize(fieldPanel.getPreferredSize());
            fieldPanel.requestFocusInTypeField();
            fieldsPanel.revalidate();
        });
    }//GEN-LAST:event_addFieldButtonActionPerformed

    private void gettersCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gettersCheckBoxActionPerformed
        if (!gettersCheckBox.isSelected()) {
            equalsCheckBox.setSelected(false);
        }
        wizardPanel.fireChangeEvent();
    }//GEN-LAST:event_gettersCheckBoxActionPerformed

    private void settersCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settersCheckBoxActionPerformed
        wizardPanel.fireChangeEvent();
    }//GEN-LAST:event_settersCheckBoxActionPerformed

    private void equalsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsCheckBoxActionPerformed
        if (equalsCheckBox.isSelected()) {
            gettersCheckBox.setSelected(true);
        }
        wizardPanel.fireChangeEvent();
    }//GEN-LAST:event_equalsCheckBoxActionPerformed

    private void hashCodeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hashCodeCheckBoxActionPerformed
        wizardPanel.fireChangeEvent();
    }//GEN-LAST:event_hashCodeCheckBoxActionPerformed

    private void toStringCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toStringCheckBoxActionPerformed
        wizardPanel.fireChangeEvent();
    }//GEN-LAST:event_toStringCheckBoxActionPerformed

    private void defaultConstructorCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultConstructorCheckBoxActionPerformed
        wizardPanel.fireChangeEvent();
    }//GEN-LAST:event_defaultConstructorCheckBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFieldButton;
    private javax.swing.JCheckBox defaultConstructorCheckBox;
    private javax.swing.JCheckBox equalsCheckBox;
    private javax.swing.JPanel fieldsPanel;
    private javax.swing.JScrollPane fieldsScrollPane;
    private javax.swing.JCheckBox gettersCheckBox;
    private javax.swing.JCheckBox hashCodeCheckBox;
    private javax.swing.JPanel includeMethodsPanel;
    private javax.swing.JScrollPane includeMethodsScrollPane;
    private javax.swing.JCheckBox settersCheckBox;
    private javax.swing.JCheckBox toStringCheckBox;
    // End of variables declaration//GEN-END:variables
}
