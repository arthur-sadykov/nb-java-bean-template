/*
 * Copyright (c) 2020 Arthur Sadykov.
 */
package nb.java.bean.template;

import javax.lang.model.element.TypeElement;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.api.java.source.ElementHandle;
import org.netbeans.api.java.source.ui.TypeElementFinder;
import org.openide.WizardDescriptor;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Arthur Sadykov
 */
public class FieldPanel extends javax.swing.JPanel implements DocumentListener {

    private static final long serialVersionUID = 1L;
    private static final String PROP_TYPE = "type";
    private static final String PROP_NAME = "name";
    private final JavaBeanWizardPanel panel;

    /**
     * Creates new form FieldPanel
     */
    private FieldPanel(JavaBeanWizardPanel panel) {
        initComponents();
        this.panel = panel;
    }

    public static FieldPanel create(JavaBeanWizardPanel panel) {
        FieldPanel fieldPanel = new FieldPanel(panel);
        fieldPanel.getNameTextField().getDocument().addDocumentListener(fieldPanel);
        fieldPanel.getTypeTextField().getDocument().addDocumentListener(fieldPanel);
        return fieldPanel;
    }

    private JTextField getNameTextField() {
        return nameTextField;
    }

    private JTextField getTypeTextField() {
        return typeTextField;
    }

    String getFieldName() {
        return nameTextField.getText();
    }

    String getFieldType() {
        return typeTextField.getText();
    }

    void requestFocusInTypeField() {
        typeTextField.requestFocus();
    }

    @Messages({
        "PROVIDE_CORRECT_NAME=Please, specify the correct name of the field.",
        "PROVIDE_CORRECT_TYPE=Please, specify the correct type of the field."
    })
    boolean valid(WizardDescriptor wizardDescriptor) {
        String name = nameTextField.getText();
        String type = typeTextField.getText();
        if (!name.matches("^[a-zA-Z]\\w*$")) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    NbBundle.getMessage(FieldPanel.class, "PROVIDE_CORRECT_NAME"));
            return false;
        }
        if (!type.matches("^[a-zA-Z]\\w*(\\.[a-zA-Z]\\w*)*$")) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    NbBundle.getMessage(FieldPanel.class, "PROVIDE_CORRECT_TYPE"));
            return false;
        }
        wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "");
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typeLabel = new javax.swing.JLabel();
        typeTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        nameTextField = new javax.swing.JTextField();

        setAlignmentX(0.0F);

        org.openide.awt.Mnemonics.setLocalizedText(typeLabel, org.openide.util.NbBundle.getMessage(FieldPanel.class, "FieldPanel.typeLabel.text")); // NOI18N

        typeTextField.setText(org.openide.util.NbBundle.getMessage(FieldPanel.class, "FieldPanel.typeTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(FieldPanel.class, "FieldPanel.nameLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(FieldPanel.class, "FieldPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        nameTextField.setText(org.openide.util.NbBundle.getMessage(FieldPanel.class, "FieldPanel.nameTextField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(typeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeLabel)
                    .addComponent(typeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel)
                    .addComponent(browseButton)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        ElementHandle<TypeElement> handle = TypeElementFinder.find(null, null, null);
        if (handle != null) {
            String fqn = handle.getQualifiedName();
            typeTextField.setText(fqn);
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JTextField typeTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
        notifyPropertyChange(e);
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        notifyPropertyChange(e);
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        notifyPropertyChange(e);
    }

    private void notifyPropertyChange(DocumentEvent e) {
        if (typeTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_TYPE, null, typeTextField.getText());
        } else if (nameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_NAME, null, nameTextField.getText());
        }
        panel.fireChangeEvent();
    }
}
